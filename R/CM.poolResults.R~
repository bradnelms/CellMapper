CM.poolResults <-
function(CM.output, log.p = TRUE) {
	if (is.list(CM.output) & !any(sapply(CM.output, function(x) { any(is.null(names(x))) }))) {
		vals = na.omit(unlist(CM.output))
		if (is.numeric(vals)) {
			if ((!log.p & (any(vals > 1) | any(vals < 0))) | (log.p & any(vals > 0))) {
				stop("Error: 'CM.output' must be a list object with each entry containing p-values returned from CellMapper\n")
			}
		} else {
			stop("Error: 'CM.output' must be a list object with each entry containing p-values returned by 'CM.search'\n")
		}
		rm(vals)
	} else {
		stop("Error: 'CM.output' must be a list object with each entry containing p-values returned by 'CM.search'CellMapper\n")
	}

	genes <- unique(unlist(lapply(1:length(CM.output), function(i) { names(CM.output[[i]]) })))

	p.vals <- matrix(nrow = length(genes), ncol = length(CM.output))
	rownames(p.vals) <- genes
	
	for (i in 1:length(CM.output)) {
		p.vals[,i] = CM.output[[i]][genes]
	}

	out = cbind(apply(p.vals, 1, combine.stouffer, log.p = log.p), p.vals)
	colnames(out) = c('Pooled p.val', names(CM.output))
	out = out[order(out[,1]),]

	return(out)
}
