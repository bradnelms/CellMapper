setClass("CellMapperInputData",
	representation(
		DataSource="character",
		GeneIDType="character",
		nrow="numeric",
		ncol="numeric",
		dataset="list"
	)
)

setMethod("dim", "CellMapperInputData",
	function(x)
	{
		c(x@nrow, x@ncol)
	}
)

setMethod("ncol", "CellMapperInputData",
	function(x)
	{
		x@ncol
	}
)

setMethod("nrow", "CellMapperInputData",
	function(x)
	{
		x@nrow
	}
)

setGeneric("DataSource", function(x) standardGeneric("DataSource"))
setMethod("DataSource", "CellMapperInputData",
	function(x)
	{
		x@DataSource
	}
)

setGeneric("GeneIDType", function(x) standardGeneric("GeneIDType"))
setMethod("GeneIDType", "CellMapperInputData",
	function(x)
	{
		x@GeneIDType
	}
)

setGeneric("dataset", function(x) standardGeneric("dataset"))
setMethod("dataset", "CellMapperInputData",
	function(x)
	{
		x@dataset
	}
)

setMethod("show", "CellMapperInputData",
	function(object)
	{
		cat(class(object), " object:\n",
		"#  Provide as input to the 'CM.search' function of the 'CellMapper' package\n",
		"#  Derived from an expression dataset with ", nrow(object), " genes and ", ncol(object), " samples\n",
			"#    Dataset source:  '", if (DataSource(object) == "") { "not provided" } else { DataSource(object) }, "'\n",
		"#  The type of gene ID used is: '", if (GeneIDType(object) == "") { "unknown" } else { GeneIDType(object) }, "'\n",
			"#    Example gene IDs:  '", paste(head(colnames(dataset(object)$B)), collapse = "', '"), "', ...\n", sep = '')
	}
)

setValidity("CellMapperInputData",
	function(object)
	{
		CM.Data <- FALSE
		Data <- dataset(object)
		if (all(c("B", "d") %in% names(Data)) & (length(Data) == 2)) {
			if (is.matrix(Data$B) & is.numeric(Data$B) & is.vector(Data$d) & is.numeric(Data$d) & (length(Data$d) == dim(Data$B)[1])) {
				CM.Data <- TRUE
			}  
		}

		if (CM.Data) {
			if (length(nrow(object)) != 1) {
				return("The 'nrow' slot must be a numeric vector with length = 1")
			} else if (length(ncol(object)) != 1) {
				return("The 'ncol' slot must be a numeric vector with length = 1")
			} else if (length(DataSource(object)) != 1) {
				return("The 'DataSource' slot must be a character vector with length = 1")
			} else if (length(GeneIDType(object)) != 1) {
				return("The 'GeneIDType' slot must be a character vector with length = 1")
			} else { return(TRUE) }
		} else { return("The dataset slot is not formatted properly. Please use the 'CM.prep' function to prepare a 'CellMapperInputData' object") }
	}
)

